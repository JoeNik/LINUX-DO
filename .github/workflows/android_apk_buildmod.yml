name: Build Android APK

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
	name: 构建Android APK
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
      - uses: actions/checkout@v3
      
      - name: 设置Java环境
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: 设置Flutter环境
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.2'
          channel: 'stable'
		  cache: true
		
	  - name: 获取Flutter依赖
        run: flutter pub get
      
      - name: 创建Keystore目录
        run: mkdir -p android/keystore
      
      - name: 设置Keystore
        if: ${{ inputs.build_type == 'release' }}
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEY_PROPERTIES: ${{ secrets.KEY_PROPERTIES }}
        run: |
          if [ -n "$KEYSTORE_BASE64" ] && [ -n "$KEY_PROPERTIES" ]; then
            echo "$KEYSTORE_BASE64" | base64 --decode > android/keystore/linux-do.jks
            echo "$KEY_PROPERTIES" > android/keystore/key.properties
            echo "已配置签名密钥"
          else
            echo "未设置签名密钥，将构建未签名APK"
          fi
      
      
      - name: 构建APK
        run: |
          if [ -n "${{ inputs.build_number }}" ]; then
            echo "使用自定义构建版本号: ${{ inputs.build_number }}"
            flutter build apk --build-number=${{ inputs.build_number }} --${{ inputs.build_type }}
          else
            if [ "${{ inputs.build_type }}" == "release" ]; then
              echo "构建release版本APK"
              flutter build apk --release --split-per-abi
            else
              echo "构建debug版本APK"
              flutter build apk --debug
            fi
          fi
      
      # Debug step to see what files are actually generated
      - name: List output files
        run: find build/app/outputs -type f
      
      # # Use a more flexible artifact path pattern
      # - name: Upload APK
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: release-apk
      #     path: |
      #       build/app/outputs/flutter-apk/*.apk
      #     retention-days: 3
		  
	  # 新增步骤：生成版本号
      - name: Generate version number
        id: version
        run: echo "version=$(date +'%Y.%m.%d.%H%M')" >> $GITHUB_OUTPUT
        
      # 新增步骤：创建Release并上传APK
      - name: Create Release and Upload APK
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version.outputs.version }}
          tag_name: v${{ steps.version.outputs.version }}
          files: build/app/outputs/apk/release/*.apk
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
