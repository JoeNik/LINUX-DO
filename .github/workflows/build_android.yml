name: Build Android APK

# 默认构建release
# 此工作流需要配置两个secrets
# KEYSTORE_BASE64 | KEY_PROPERTIES
# 配置步骤:
# 1. 打开仓库Settings
# 2. 点击Secrets and variables
# 3. 点击New repository secret
# 4. 添加两个secret
# 5. 添加KEYSTORE_BASE64 值可以使用base64命令来或在线工具生成 (base64 -i release.jks | .keystore文件一样)
# 6. 添加KEY_PROPERTIES 值可以直接复制内容填写
# 内容大概是这个样子:
# storePassword=password
# keyPassword=password
# keyAlias=keyAlias
# storeFile=xxx.jks


on:
  workflow_dispatch:
    inputs:
      build_type:
        description: '构建类型'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - debug
      build_number:
        description: '构建版本号'
        required: false
        type: string

jobs:
  build:
    name: 构建Android APK
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
      
      - name: 设置Java环境
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: gradle
      
      - name: 设置Flutter环境
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.2'
          channel: 'stable'
          cache: true
      
      - name: 获取Flutter依赖
        run: flutter pub get
      
      - name: 创建Keystore目录
        run: mkdir -p android/keystore
        
      - name: 设置Keystore
        if: ${{ inputs.build_type == 'release' }}
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEY_PROPERTIES: ${{ secrets.KEY_PROPERTIES }}
        run: |
          if [ -n "$KEYSTORE_BASE64" ] && [ -n "$KEY_PROPERTIES" ]; then
            echo "$KEYSTORE_BASE64" | base64 --decode > android/keystore/linux-do.jks
            echo "$KEY_PROPERTIES" > android/keystore/key.properties
            echo "已配置签名密钥"
          else
            echo "未设置签名密钥，将构建未签名APK"
          fi
      
      - name: 构建APK
        run: |
          if [ -n "${{ inputs.build_number }}" ]; then
            echo "使用自定义构建版本号: ${{ inputs.build_number }}"
            flutter build apk --build-number=${{ inputs.build_number }} --${{ inputs.build_type }}
          else
            if [ "${{ inputs.build_type }}" == "release" ]; then
              echo "构建release版本APK"
              flutter build apk --release --split-per-abi
            else
              echo "构建debug版本APK"
              flutter build apk --debug
            fi
          fi
      
      - name: 上传Release APK
        if: ${{ inputs.build_type == 'release' }}
        uses: actions/upload-artifact@v4
        with:
          name: linux-do-release-apks
          path: |
            build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
            build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
            build/app/outputs/flutter-apk/app-x86_64-release.apk
          retention-days: 7
      
      # - name: 上传Debug APK
      #   if: ${{ inputs.build_type == 'debug' }}
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: linux-do-debug-apk
      #     path: build/app/outputs/flutter-apk/app-debug.apk
      #     retention-days: 7
      
      # - name: 生成发布说明
      #   run: |
      #     echo "# Linux DO APK构建" > release_notes.md
      #     echo "" >> release_notes.md
      #     echo "## 构建信息" >> release_notes.md
      #     echo "- **构建类型**: ${{ inputs.build_type }}" >> release_notes.md
      #     echo "- **构建版本号**: ${{ inputs.build_number || '默认' }}" >> release_notes.md
      #     echo "- **构建日期**: $(date)" >> release_notes.md
      #     echo "- **提交SHA**: $(git rev-parse --short HEAD)" >> release_notes.md
      
      # - name: 上传发布说明
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: release-notes
      #     path: release_notes.md
      #     retention-days: 7 